{"version":3,"sources":["Components/common/Product/Item/Product-Item.tsx","Components/common/Product/Product.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["cnProduct","cn","ProductItem","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","selectItem","bind","assertThisInitialized","state","selected","inherits","createClass","key","value","e","setState","productInfo","info","react","className","href","link","onClick","status","description","company","taste","promo","portion","gift","src","alt","serving","concat","React","Product","_ref","productItems","data","map","el","Product_Item_ProductItem","id","cnPage","App","react_default","a","createElement","style","backgroundImage","Product_Product_Product","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.aa172576.chunk.js","sourcesContent":["import { cn } from '@bem-react/classname';\nimport * as React from 'react';\n\nimport './Product-Item.css';\n\nconst cnProduct = cn('Product');\n\nexport interface IProductItemProps {\n  className?: string;\n  description?: string;\n  company?: string;\n  taste?: string;\n  promo?: any;\n  serving?: string;\n  info?: string;\n  link?: string;\n  status?: string;\n}\n\nexport interface IProductItemState {\n  selected?: boolean;\n}\n\nexport class ProductItem extends React.Component <IProductItemProps, IProductItemState> {\n  constructor(props: IProductItemProps) {\n    super(props);\n\n    this.selectItem = this.selectItem.bind(this);\n\n    this.state = {\n      selected: false\n    };\n  }\n\n  selectItem(e: React.MouseEvent) {\n    this.setState({\n      selected: !this.state.selected\n    });\n  }\n\n  render() {\n    const productInfo = !this.state.selected ?\n      <>\n        Чего сидишь? Порадуй котэ\n        <a className={cnProduct('Link')} href={this.props.link} onClick={this.selectItem}>купи</a>\n      </> :\n      this.props.info;\n\n    return (\n      <div className={cnProduct('Item', {\"status\": this.props.status, \"selected\": this.state.selected})}>\n        <div className={cnProduct('Card')} onClick={this.selectItem}>\n          <div className={cnProduct('Description')}>\n            <div className={cnProduct('DescriptionText')}>{this.props.description}</div>\n            <div className={cnProduct('Hint')}>Котэ не одобряет?</div>\n          </div>\n          <div className={cnProduct('Company')}>{this.props.company}</div>\n          <div className={cnProduct('Taste')}>{this.props.taste}</div>\n          <div className={cnProduct('Promo')}>\n            <p className={cnProduct('Portion')}>{this.props.promo.portion}</p>\n            <p className={cnProduct('Gift')}>{this.props.promo.gift}</p>\n          </div>\n          <img className={cnProduct('Image')} src=\"./img/cat.png\" alt=\"Funbox cat\"/>\n          <div className={cnProduct('Serving')}>\n            <div className={cnProduct('Weight')}>{this.props.serving}</div>\n            <div className={cnProduct('Units')}>кг</div>\n          </div>\n        </div>\n        <div className={cnProduct('Info')}>{\n          (!this.props.status) ?\n            productInfo :\n            `Печалька, ${this.props.taste} закончился.`\n        }\n        </div>\n      </div>\n    );\n  }\n};\n","import { cn } from '@bem-react/classname';\nimport * as React from 'react';\n\nimport './Product.css';\nimport data from './ProductData.json';\nimport { ProductItem } from './Item/Product-Item';\n\nconst cnProduct = cn('Product');\n\nexport interface IProductProps {\n  className?: string;\n}\n\nexport const Product: React.SFC<IProductProps> = ({className}) => {\n  const productItems = data.map((el) => (\n    <ProductItem\n      key={el.id}\n      description={el.description}\n      company={el.company}\n      taste={el.taste}\n      promo={el.promo}\n      serving={el.serving}\n      info={el.info}\n      link={el.link}\n      status={el.status}\n    />\n  ));\n\n  return (\n    <div className={`${cnProduct()} ${className}`}>\n      {productItems}\n    </div>\n  );\n}\n","import { cn } from '@bem-react/classname';\nimport React, { Component } from 'react';\n\nimport './fonts/fonts.css';\nimport './App.css';\nimport { Product } from './Components/common/Product/Product';\n\nconst cnPage = cn('Page');\n\nclass App extends Component {\n  render() {\n    return (\n      <div className={cnPage()} style={{backgroundImage: 'url(img/bg.png)'}}>\n        <h1 className={cnPage('Title')}>Ты сегодня покормил кота?</h1>\n        <Product className={cnPage('Product')} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}